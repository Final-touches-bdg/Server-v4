#!/bin/bash
# Enhanced man wrapper for terminal environment

# Source shell functions if available
if [[ -f "$HOME/.local/lib/shell_functions.sh" ]]; then
  source "$HOME/.local/lib/shell_functions.sh"
fi

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
NC='\033[0m' # No Color

# Check if system man exists and use it if available
if command -v /usr/bin/man &>/dev/null; then
  # Use the real man command
  /usr/bin/man "$@"
  exit $?
fi

# If no real man command, use our help system

# Check if we have arguments
if [ $# -eq 0 ]; then
  echo -e "${BOLD}ENHANCED MANUAL PAGES${NC}"
  echo
  echo -e "Usage: man COMMAND"
  echo -e "       man -k KEYWORD"
  echo
  echo "Available command categories:"
  
  # Load the help index if it exists
  if [[ -f "$HOME/.local/lib/help/index.txt" ]]; then
    # Get unique categories
    categories=$(grep -v "
^
#" "$HOME/.local/lib/help/index.txt" | cut -d'|' -f2 | sort | uniq)
    
    for category in $categories; do
      echo -e "  ${YELLOW}$category${NC}"
    done
    
    echo -e "\nUse 'man -k category' to see commands in a category"
    echo -e "Example: man -k network"
  else
    echo -e "${RED}Help index not found.${NC}"
    echo "Expected location: $HOME/.local/lib/help/index.txt"
  fi
  
  exit 0
fi

# Check for -k option (keyword search)
if [ "$1" = "-k" ]; then
  if [ -z "$2" ]; then
    echo -e "${RED}Error: No keyword specified${NC}"
    echo "Usage: man -k KEYWORD"
    exit 1
  fi
  
  keyword="$2"
  
  # Load the help index if it exists
  if [[ -f "$HOME/.local/lib/help/index.txt" ]]; then
    echo -e "${BOLD}Manual page keywords matching '${keyword}':${NC}"
    
    # Search for keyword in commands, categories, or descriptions
    count=0
    while IFS='|' read -r cmd category desc || [[ -n "$cmd" ]]; do
      # Skip comments
      if [[ "$cmd" =~ 
^
#.* ]]; then
        continue
      fi
      
      if [[ "$cmd" == *"$keyword"* || "$category" == *"$keyword"* || "$desc" == *"$keyword"* ]]; then
        echo -e "${GREEN}$cmd${NC} ($category) - $desc"
        count=$((count + 1))
      fi
    done < "$HOME/.local/lib/help/index.txt"
    
    if [ $count -eq 0 ]; then
      echo -e "${RED}No matches found for keyword '$keyword'${NC}"
    else
      echo -e "\n${GREEN}$count matches found${NC}"
    fi
  else
    echo -e "${RED}Help index not found.${NC}"
    echo "Expected location: $HOME/.local/lib/help/index.txt"
  fi
  
  exit 0
fi

# Get the command name
command_name="$1"

# Attempt to find the man page for this command
man_page_found=false

# Check if we have a dedicated help file for this command
help_file="$HOME/.local/lib/help/$command_name.txt"
if [[ -f "$help_file" ]]; then
  # Display the help file with formatting
  echo -e "${BOLD}${UNDERLINE}$command_name${NC}${BOLD} - Manual Page${NC}\n"
  
  # Format the help file content with simple markup
  while IFS= read -r line; do
    if [[ "$line" =~ 
^
#.* ]]; then
      # Headers
      echo -e "${BOLD}${line#\#}${NC}"
    elif [[ "$line" =~ 
^
\*.* ]]; then
      # List items
      echo -e "  ${YELLOW}${line#\*}${NC}"
    elif [[ "$line" =~ 
^
NOTE:.* ]]; then
      # Notes
      echo -e "${CYAN}${line}${NC}"
    elif [[ "$line" =~ 
^
WARNING:.* ]]; then
      # Warnings
      echo -e "${RED}${line}${NC}"
    elif [[ "$line" =~ 
^
===.* ]]; then
      # Section dividers
      echo -e "${BLUE}${line}${NC}"
    else
      # Normal text
      echo "$line"
    fi
  done < "$help_file"
  
  man_page_found=true
fi

# If no dedicated help file, check for command in index
if ! $man_page_found && [[ -f "$HOME/.local/lib/help/index.txt" ]]; then
  # Find the command in the index
  cmd_data=$(grep -m 1 "
^
$command_name|" "$HOME/.local/lib/help/index.txt")
  
  if [[ -n "$cmd_data" ]]; then
    # Parse command data
    IFS='|' read -r cmd category desc <<< "$cmd_data"
    
    # Create a basic man page
    echo -e "${BOLD}${UNDERLINE}$cmd${NC}${BOLD} - Manual Page${NC}\n"
    echo -e "${BOLD}NAME${NC}"
    echo -e "       $cmd - $desc\n"
    
    echo -e "${BOLD}CATEGORY${NC}"
    echo -e "       $category\n"
    
    echo -e "${BOLD}SYNOPSIS${NC}"
    echo -e "       $cmd [OPTION]... [FILE]...\n"
    
    echo -e "${BOLD}DESCRIPTION${NC}"
    echo -e "       $desc\n"
    
    # Try to get more detailed help using --help
    if command -v "$cmd" &>/dev/null; then
      help_output=$("$cmd" --help 2>/dev/null)
      if [[ $? -eq 0 && -n "$help_output" ]]; then
        echo -e "${BOLD}HELP OUTPUT${NC}"
        echo -e "$help_output" | head -n 20
        
        if [[ $(echo "$help_output" | wc -l) -gt 20 ]]; then
          echo -e "\n       ${YELLOW}... Use '$cmd --help' for the full help output${NC}"
        fi
      fi
    fi
    
    # Find related commands
    echo -e "\n${BOLD}SEE ALSO${NC}"
    related=$(grep -m 3 "|$category|" "$HOME/.local/lib/help/index.txt" | grep -v "
^
$cmd|" | cut -d'|' -f1)
    if [[ -n "$related" ]]; then
      echo -e "       ${GREEN}$(echo "$related" | tr '\n' ' ')${NC}"
    else
      echo -e "       No related commands found"
    fi
    
    man_page_found=true
  fi
fi

# If we still don't have a man page, check if the command has --help
if ! $man_page_found && command -v "$command_name" &>/dev/null; then
  help_output=$("$command_name" --help 2>/dev/null)
  
  if [[ $? -eq 0 && -n "$help_output" ]]; then
    echo -e "${BOLD}${UNDERLINE}$command_name${NC}${BOLD} - Help Output${NC}\n"
    echo "$help_output"
    man_page_found=true
  fi
fi

# If all else fails, show a message
if ! $man_page_found; then
  echo -e "${RED}No manual entry for $command_name${NC}"
  
  # Suggest alternatives
  if [[ -f "$HOME/.local/lib/help/index.txt" ]]; then
    # Look for similar commands
    similar=$(grep -m 3 -i "${command_name:0:3}" "$HOME/.local/lib/help/index.txt" | cut -d'|' -f1)
    
    if [[ -n "$similar" ]]; then
      echo -e "\n${YELLOW}Similar commands:${NC}"
      echo -e "${GREEN}$(echo "$similar" | tr '\n' ' ')${NC}"
    fi
  fi
  
  exit 1
fi

exit 0
