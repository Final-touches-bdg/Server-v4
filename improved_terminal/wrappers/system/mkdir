#!/bin/bash
# Enhanced mkdir wrapper with better error handling and feedback

# Source shell functions if available
if [[ -f "$HOME/.local/lib/shell_functions.sh" ]]; then
  source "$HOME/.local/lib/shell_functions.sh"
fi

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check arguments
if [ $# -eq 0 ]; then
  echo "Usage: mkdir [OPTION]... DIRECTORY..."
  echo "Create the DIRECTORY(ies), if they do not already exist."
  echo
  echo "  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask"
  echo "  -p, --parents     no error if existing, make parent directories as needed"
  echo "  -v, --verbose     print a message for each created directory"
  echo "      --help        display this help and exit"
  exit 0
fi

# Parse options
verbose=false
parents=false
mode=""

while [ $# -gt 0 ]; do
  case "$1" in
    -v|--verbose)
      verbose=true
      shift
      ;;
    -p|--parents)
      parents=true
      shift
      ;;
    -m|--mode=*)
      if [[ "$1" == "-m" ]]; then
        mode="$2"
        shift 2
      else
        mode="${1#*=}"
        shift
      fi
      ;;
    --help)
      echo "Usage: mkdir [OPTION]... DIRECTORY..."
      echo "Create the DIRECTORY(ies), if they do not already exist."
      echo
      echo "  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask"
      echo "  -p, --parents     no error if existing, make parent directories as needed"
      echo "  -v, --verbose     print a message for each created directory"
      echo "      --help        display this help and exit"
      exit 0
      ;;
    -*)
      echo -e "${RED}mkdir: invalid option -- '$1'${NC}"
      echo "Try 'mkdir --help' for more information."
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

# Check if there are any directories to create
if [ $# -eq 0 ]; then
  echo -e "${RED}mkdir: missing operand${NC}"
  echo "Try 'mkdir --help' for more information."
  exit 1
fi

# Build mkdir command
mkdir_cmd="mkdir"
if $parents; then
  mkdir_cmd="$mkdir_cmd -p"
fi
if [ -n "$mode" ]; then
  mkdir_cmd="$mkdir_cmd -m $mode"
fi

# Process each directory
exit_code=0
for dir in "$@"; do
  # Check if directory exists and parents option is not set
  if [ -d "$dir" ] && ! $parents; then
    echo -e "${RED}mkdir: cannot create directory '$dir': File exists${NC}"
    exit_code=1
    continue
  fi
  
  # Create directory
  if $parents; then
    # Create with parents
    if ! mkdir -p "$dir" 2>/dev/null; then
      echo -e "${RED}mkdir: cannot create directory '$dir': Permission denied${NC}"
      exit_code=1
      continue
    fi
  else
    # Create without parents
    if ! mkdir "$dir" 2>/dev/null; then
      parent_dir=$(dirname "$dir")
      if [ ! -d "$parent_dir" ]; then
        echo -e "${RED}mkdir: cannot create directory '$dir': No such file or directory${NC}"
      else
        echo -e "${RED}mkdir: cannot create directory '$dir': Permission denied${NC}"
      fi
      exit_code=1
      continue
    fi
  fi
  
  # Apply mode if specified
  if [ -n "$mode" ]; then
    chmod "$mode" "$dir" 2>/dev/null || {
      echo -e "${RED}mkdir: cannot set permissions for directory '$dir'${NC}"
      exit_code=1
    }
  fi
  
  # Print message if verbose
  if $verbose; then
    echo -e "${GREEN}mkdir: created directory '$dir'${NC}"
  fi
done

exit $exit_code
