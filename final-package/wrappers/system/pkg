#!/bin/bash
# Package management simulation for iOS Terminal

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Package database location
PKG_DB="$HOME/.local/var/lib/pkg/installed.txt"
PKG_LIST="$HOME/.local/var/lib/pkg/available.txt"

# Ensure package database directory exists
mkdir -p "$(dirname "$PKG_DB")" 2>/dev/null

# Create package list if it doesn't exist
if [ ! -f "$PKG_LIST" ]; then
  mkdir -p "$(dirname "$PKG_LIST")" 2>/dev/null
  cat > "$PKG_LIST" << 'PKGLIST'
bash|Shell|The GNU Bourne Again SHell
python3|Development|Python programming language interpreter
git|Development|Distributed version control system
nodejs|Development|JavaScript runtime
vim|Editors|Vi IMproved - enhanced text editor
nano|Editors|Small and friendly text editor
curl|Network|Command line tool for transferring data
wget|Network|The non-interactive network downloader
gcc|Development|GNU C compiler
make|Development|GNU make utility
unzip|Utilities|List, test and extract compressed files in a ZIP archive
tar|Utilities|GNU version of the tar archiving utility
PKGLIST
fi

# Create installed packages file if it doesn't exist
if [ ! -f "$PKG_DB" ]; then
  # Default installations
  mkdir -p "$(dirname "$PKG_DB")" 2>/dev/null
  cat > "$PKG_DB" << 'INSTALLED'
bash
python3
nano
curl
INSTALLED
fi

# Show usage
show_help() {
  echo "Usage: pkg COMMAND [arguments]"
  echo
  echo "Commands:"
  echo "  install PACKAGE...    Install packages"
  echo "  remove PACKAGE...     Remove packages"
  echo "  search TERM           Search for packages"
  echo "  list-installed        List installed packages"
  echo "  list-available        List all available packages"
  echo "  update                Update package list"
  echo "  upgrade               Upgrade installed packages"
  echo "  help                  Show this help"
  echo
  echo "Example: pkg install vim"
}

# Check command
if [ $# -eq 0 ]; then
  show_help
  exit 0
fi

command="$1"
shift

case "$command" in
  install)
    if [ $# -eq 0 ]; then
      echo -e "${RED}Error: No packages specified for installation${NC}"
      exit 1
    fi
    
    echo -e "${BLUE}Installing packages...${NC}"
    for pkg in "$@"; do
      # Check if package is already installed
      if grep -q "
^
$pkg$" "$PKG_DB" 2>/dev/null; then
        echo -e "${YELLOW}Package '$pkg' is already installed${NC}"
        continue
      fi
      
      # Check if package exists in available list
      if grep -q "
^
$pkg|" "$PKG_LIST" 2>/dev/null; then
        echo -e "${GREEN}Installing $pkg...${NC}"
        # Simulate installation
        sleep 1
        # Add to installed list
        echo "$pkg" >> "$PKG_DB"
        echo -e "${GREEN}Successfully installed $pkg${NC}"
      else
        echo -e "${RED}Package '$pkg' not found in repository${NC}"
      fi
    done
    ;;
    
  remove)
    if [ $# -eq 0 ]; then
      echo -e "${RED}Error: No packages specified for removal${NC}"
      exit 1
    fi
    
    echo -e "${BLUE}Removing packages...${NC}"
    for pkg in "$@"; do
      # Check if package is installed
      if grep -q "
^
$pkg$" "$PKG_DB" 2>/dev/null; then
        echo -e "${YELLOW}Removing $pkg...${NC}"
        # Simulate removal
        sleep 1
        # Remove from installed list
        grep -v "
^
$pkg$" "$PKG_DB" > "${PKG_DB}.tmp"
        mv "${PKG_DB}.tmp" "$PKG_DB"
        echo -e "${GREEN}Successfully removed $pkg${NC}"
      else
        echo -e "${RED}Package '$pkg' is not installed${NC}"
      fi
    done
    ;;
    
  search)
    if [ $# -eq 0 ]; then
      echo -e "${RED}Error: No search term provided${NC}"
      exit 1
    fi
    
    term="$1"
    echo -e "${BLUE}Searching for packages matching '$term'...${NC}"
    
    found=0
    while IFS='|' read -r name category description || [ -n "$name" ]; do
      if [[ "$name" == "#"* ]]; then
        continue  # Skip comments
      fi
      
      if [[ "$name" == *"$term"* || "$description" == *"$term"* ]]; then
        installed=""
        if grep -q "
^
$name$" "$PKG_DB" 2>/dev/null; then
          installed=" [installed]"
        fi
        echo -e "${GREEN}$name${NC}${YELLOW}$installed${NC} ($category) - $description"
        found=$((found + 1))
      fi
    done < "$PKG_LIST"
    
    if [ $found -eq 0 ]; then
      echo -e "${YELLOW}No packages found matching '$term'${NC}"
    else
      echo -e "${GREEN}Found $found package(s) matching '$term'${NC}"
    fi
    ;;
    
  list-installed)
    echo -e "${BLUE}Installed packages:${NC}"
    if [ -f "$PKG_DB" ]; then
      while read -r pkg || [ -n "$pkg" ]; do
        if [[ -z "$pkg" || "$pkg" == "#"* ]]; then
          continue  # Skip empty lines and comments
        fi
        
        # Get description if available
        description=$(grep "
^
$pkg|" "$PKG_LIST" | cut -d'|' -f3)
        if [ -n "$description" ]; then
          echo -e "${GREEN}$pkg${NC} - $description"
        else
          echo -e "${GREEN}$pkg${NC}"
        fi
      done < "$PKG_DB"
    else
      echo -e "${YELLOW}No packages installed yet${NC}"
    fi
    ;;
    
  list-available)
    echo -e "${BLUE}Available packages:${NC}"
    echo -e "${YELLOW}Category | Package | Description${NC}"
    echo "------------------------------------"
    
    if [ -f "$PKG_LIST" ]; then
      while IFS='|' read -r name category description || [ -n "$name" ]; do
        if [[ "$name" == "#"* ]]; then
          continue  # Skip comments
        fi
        
        installed=""
        if grep -q "
^
$name$" "$PKG_DB" 2>/dev/null; then
          installed=" [installed]"
        fi
        
        echo -e "${YELLOW}$category${NC} | ${GREEN}$name${NC}${YELLOW}$installed${NC} | $description"
      done < "$PKG_LIST"
    else
      echo -e "${RED}Package list not available${NC}"
    fi
    ;;
    
  update)
    echo -e "${BLUE}Updating package lists...${NC}"
    # Simulate update
    echo -n "Downloading package information... "
    for i in $(seq 1 10); do
      echo -n "#"
      sleep 0.1
    done
    echo " 100%"
    echo -e "${GREEN}Package lists updated${NC}"
    ;;
    
  upgrade)
    echo -e "${BLUE}Upgrading installed packages...${NC}"
    # Simulate upgrade
    if [ -f "$PKG_DB" ]; then
      pkg_count=$(grep -v "
^
#" "$PKG_DB" | wc -l)
      if [ $pkg_count -gt 0 ]; then
        echo "Checking $pkg_count package(s) for updates..."
        sleep 1
        echo -e "${GREEN}All packages are up to date${NC}"
      else
        echo -e "${YELLOW}No packages installed to upgrade${NC}"
      fi
    else
      echo -e "${YELLOW}No packages installed to upgrade${NC}"
    fi
    ;;
    
  help)
    show_help
    ;;
    
  *)
    echo -e "${RED}Unknown command: $command${NC}"
    show_help
    exit 1
    ;;
esac

exit 0
